// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=fileserviceiface FileService
//

// Package fileserviceiface is a generated GoMock package.
package fileserviceiface

import (
	context "context"
	reflect "reflect"

	api "github.com/cloudzenith/DouTok/backend/baseService/api"
	slicingfile "github.com/cloudzenith/DouTok/backend/baseService/internal/domain/entity/slicingfile"
	gomock "go.uber.org/mock/gomock"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// GetProgressRate4SlicingPut mocks base method.
func (m *MockFileService) GetProgressRate4SlicingPut(ctx context.Context, uploadId string, fileCtx *api.FileContext) (map[int]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressRate4SlicingPut", ctx, uploadId, fileCtx)
	ret0, _ := ret[0].(map[int]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressRate4SlicingPut indicates an expected call of GetProgressRate4SlicingPut.
func (mr *MockFileServiceMockRecorder) GetProgressRate4SlicingPut(ctx, uploadId, fileCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressRate4SlicingPut", reflect.TypeOf((*MockFileService)(nil).GetProgressRate4SlicingPut), ctx, uploadId, fileCtx)
}

// MergeFileParts mocks base method.
func (m *MockFileService) MergeFileParts(ctx context.Context, uploadId string, fileCtx *api.FileContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeFileParts", ctx, uploadId, fileCtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeFileParts indicates an expected call of MergeFileParts.
func (mr *MockFileServiceMockRecorder) MergeFileParts(ctx, uploadId, fileCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeFileParts", reflect.TypeOf((*MockFileService)(nil).MergeFileParts), ctx, uploadId, fileCtx)
}

// PreSignGet mocks base method.
func (m *MockFileService) PreSignGet(ctx context.Context, fileCtx *api.FileContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreSignGet", ctx, fileCtx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreSignGet indicates an expected call of PreSignGet.
func (mr *MockFileServiceMockRecorder) PreSignGet(ctx, fileCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreSignGet", reflect.TypeOf((*MockFileService)(nil).PreSignGet), ctx, fileCtx)
}

// PreSignPut mocks base method.
func (m *MockFileService) PreSignPut(ctx context.Context, fileCtx *api.FileContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreSignPut", ctx, fileCtx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreSignPut indicates an expected call of PreSignPut.
func (mr *MockFileServiceMockRecorder) PreSignPut(ctx, fileCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreSignPut", reflect.TypeOf((*MockFileService)(nil).PreSignPut), ctx, fileCtx)
}

// PreSignSlicingPut mocks base method.
func (m *MockFileService) PreSignSlicingPut(ctx context.Context, fileCtx *api.FileContext) (*slicingfile.SlicingFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreSignSlicingPut", ctx, fileCtx)
	ret0, _ := ret[0].(*slicingfile.SlicingFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreSignSlicingPut indicates an expected call of PreSignSlicingPut.
func (mr *MockFileServiceMockRecorder) PreSignSlicingPut(ctx, fileCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreSignSlicingPut", reflect.TypeOf((*MockFileService)(nil).PreSignSlicingPut), ctx, fileCtx)
}

// RemoveFile mocks base method.
func (m *MockFileService) RemoveFile(ctx context.Context, fileCtx *api.FileContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", ctx, fileCtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockFileServiceMockRecorder) RemoveFile(ctx, fileCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockFileService)(nil).RemoveFile), ctx, fileCtx)
}

// ReportUploadedFileParts mocks base method.
func (m *MockFileService) ReportUploadedFileParts(ctx context.Context, uploadId string, fileId, partNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportUploadedFileParts", ctx, uploadId, fileId, partNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportUploadedFileParts indicates an expected call of ReportUploadedFileParts.
func (mr *MockFileServiceMockRecorder) ReportUploadedFileParts(ctx, uploadId, fileId, partNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUploadedFileParts", reflect.TypeOf((*MockFileService)(nil).ReportUploadedFileParts), ctx, uploadId, fileId, partNumber)
}
