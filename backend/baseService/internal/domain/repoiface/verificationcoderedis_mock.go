// Code generated by MockGen. DO NOT EDIT.
// Source: verificationcoderedis.go
//
// Generated by this command:
//
//	mockgen -source=verificationcoderedis.go -destination=verificationcoderedis_mock.go -package=repoiface VerificationCodeRedisRepository
//

// Package repoiface is a generated GoMock package.
package repoiface

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVerificationCodeRedisRepository is a mock of VerificationCodeRedisRepository interface.
type MockVerificationCodeRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationCodeRedisRepositoryMockRecorder
}

// MockVerificationCodeRedisRepositoryMockRecorder is the mock recorder for MockVerificationCodeRedisRepository.
type MockVerificationCodeRedisRepositoryMockRecorder struct {
	mock *MockVerificationCodeRedisRepository
}

// NewMockVerificationCodeRedisRepository creates a new mock instance.
func NewMockVerificationCodeRedisRepository(ctrl *gomock.Controller) *MockVerificationCodeRedisRepository {
	mock := &MockVerificationCodeRedisRepository{ctrl: ctrl}
	mock.recorder = &MockVerificationCodeRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationCodeRedisRepository) EXPECT() *MockVerificationCodeRedisRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVerificationCodeRedisRepository) Get(ctx context.Context, verificationCodeId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, verificationCodeId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVerificationCodeRedisRepositoryMockRecorder) Get(ctx, verificationCodeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVerificationCodeRedisRepository)(nil).Get), ctx, verificationCodeId)
}

// Insert mocks base method.
func (m *MockVerificationCodeRedisRepository) Insert(ctx context.Context, verificationCodeId, expireTime int64, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, verificationCodeId, expireTime, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockVerificationCodeRedisRepositoryMockRecorder) Insert(ctx, verificationCodeId, expireTime, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVerificationCodeRedisRepository)(nil).Insert), ctx, verificationCodeId, expireTime, code)
}

// Remove mocks base method.
func (m *MockVerificationCodeRedisRepository) Remove(ctx context.Context, verificationCodeId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, verificationCodeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockVerificationCodeRedisRepositoryMockRecorder) Remove(ctx, verificationCodeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockVerificationCodeRedisRepository)(nil).Remove), ctx, verificationCodeId)
}
